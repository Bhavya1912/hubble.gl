{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Introduction Hubble.gl is a JavaScript library for animating data visualizations. High Quality Video:  Guaranteed smooth framerates, high resolutions, and a variety of formats. Render the quality you want at the speed you need it. Fine tune timing and look with keyframe markers and render everything in the same app. Easy Integration:  Stand up scenes within deck.gl or kepler.gl, then animate any aspect of it. Empower users to animate without code with UI components included in this library. Client Side Library:  Videos render and encode directly in the web browser. User data never leaves their machine. Since nothing runs on a server, sites can scale without computation costs. Installation Basic Scene To create an animation and render you will need to first create a  deck.gl  or  kepler.gl  project. Then you will need to create a  getDeckScene  function for each scene where you'll define all of the elements of your animation, including any async data fetching. Using With React With a  sceneBuilder  in hand, create a  DeckAdapter  and choose a  FrameEncoder  for rendering a variety of video and image sequence formats. Hubble.gl provide a  useNextFrame  hook for React.js, which is used to trigger a update when necessary.","headings":[{"value":"Introduction","depth":1},{"value":"Installation","depth":2},{"value":"Basic Scene","depth":2},{"value":"Using With React","depth":2}],"slug":"docs","title":"Introduction"},{"excerpt":"Upgrade Guide","headings":[{"value":"Upgrade Guide","depth":1}],"slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"Rendering Tips Hubble offers the following options to render your visualizations: GIF WebM video PNG sequence JPEG sequence If you would like to use the exports in a presentation we recommend the following steps: GIF Usable as is. Feel free to add it to your presentation, notebook, or showcase! Convert WebM There are plenty of free converters out there. The ones written in this guide will be based off of:  https://convertio.co/ Step 1: Pick your WebM file Step 2: Click the \"...\" option to open up a menu Step 3: Select the filetype that you want. We recommend GIF/MP4 for use in your presentations Step 4: Click Convert Convert JPEG sequence to GIF There are plenty of free converters out there. The ones written in this guide will be based off of:  https://gifmaker.me/ Step 1: Untar the file. On Windows a tool like  7-Zip  can be used Step 2: Click on Upload Images Step 3: Select all the images in the folder that was created Step 4: Open all the images Step 4a: A preview will be generated at the top. Settings such as order and pacing can be adjusted if anything looks wrong Step 5: Click on \"Create GIF Animation\" Step 6: Click on \"Download the GIF\" Convert PNG sequence to GIF See \"Convert JPEG sequence to GIF\" section.","headings":[{"value":"Rendering Tips","depth":1},{"value":"GIF","depth":3},{"value":"Convert WebM","depth":3},{"value":"Convert JPEG sequence to GIF","depth":3},{"value":"Convert PNG sequence to GIF","depth":3}],"slug":"docs/rendering-tip","title":"Rendering Tips"},{"excerpt":"Post Processing Workflow Video editors and presentation software can be used to add text, dissolve between clips, and combine multiple renderings. While there are probably methods to incorporate many post processing techniques we've used into the web browser, there are many benefits afforded from using existing tools for certain parts of your animation workflow. This document aims to breakdown our workflow and walk you through the steps taken  after  a render completes. Adding Text and Graphics The most common post processing needed is some kind of text annotation to contextualize what your audience is looking at. For presentations, we recommend adding text or simple graphical elements, such as a legend, within your presentation software, such as Google Slides or Apple Keynote. This enables much faster iteration on copy and typographic design between you and your team compared to rendering and importing again after every text change. For example, presentation software was used to add text and an animated timeline synced with the data being displayed. Pacing Animations with your Speaker While presentations are usually rehearsed and carefully planned, they are  live  performances. That means the speaker expects to have control over their pacing as they guide their audience through a story. If planned for up front, splitting animations up into multiple slides is an easy way to give your speaker this control without adding much additional complexity to your program. To do this, match your camera positions up at the end of one slide and the start of the next. To avoid unpolished transitions between slides, make each clip shorter than the speakers time spent on the slide and simply freeze on the last frame of the video when it ends. For example, the clip pauses after each camera motion is finished and the speaker clicks to activate the next slide. Combining Clips Revealing new visuals within a single clip can have a great effect for your audience. Usually animating opacity within hubble.gl is sufficient, but in some situations, such as transitioning between base maps using a video editor is the easiest way to produce the effect. Plan to capture multiple renderings with hubble.gl for each phase of your clip. Ensure they use the same camera motion and encoder settings. Line clips up in your video editor to dissolve between them. For example, the base map and bar styles transition to reveal the points of interest at this location. A quick note on video editors, pay attention to video export settings and try to avoid losing quality during an export. ","headings":[{"value":"Post Processing Workflow","depth":1},{"value":"Adding Text and Graphics","depth":2},{"value":"Pacing Animations with your Speaker","depth":2},{"value":"Combining Clips","depth":2}],"slug":"docs/post-processing","title":"Post Processing Workflow"},{"excerpt":"Whats New 1.0.1 Initial release. 1.1.0 Encoders are constructed right before rendering starts, instead of only when a scene is defined.  #1 DeckAdapter.render now accepts a onStop callback. Remove stop and dispose from FrameEncoders  #3 Allow PNGEncoder transparent frames  #4 Refactor encoder settings and scene settings api  #8 scene settings are defined at scene load time, so you can set scene resolution and animation length there. encoder settings are defined before every render, so you can set seek options there. format-specific encoder settings are namespaced by encoder ( jpeg  settings are under  jpeg , etc..). Gif Encoder  #7 1.2.0 Added Automatic animation attachment,  see example . DeckScene Added  initialKeyframes  parameter on  DeckScene . Initializes keyframes prior to first render. Provide dynamic keyframes via  DeckAdapter.render({getCameraKeyframes, getKeyframes})  accessors. DeckScene.setKeyframes  may also be used to register new keyframes. DeckAdapter DeckAdapter.seek  added to enable previewing any specific frame while paused. DeckAdapter glContext parameter added to support browser testing. DeckAdapter.getProps({extraProps})  added to inject additional deck props without interfering with Hubble. DeckAdapter.getProps({getLayers})  added for when it’s necessary to access keyframes for animated layers. getLayers:  (scene) => layers[] CameraKeyframes  now supports  flyTo  interpolation. new CameraKeyframes({interpolators: 'flyTo'}) GifEncoder  defaults tuned to increase quality and reduce size. React Kepler UI component injection  hooks and providers . This enables 3rd party libraries integrated with Kepler.gl to inject components provided by Kepler without circularly depending on Kepler. Examples Quick start example Read how to wrap deck.gl with a recorder in this  before  and  after . Kepler.gl integration example Worldview example  is a web app you can use to create fully customizable animated map videos in seconds without any installation or expensive server processing by utilizing hubble.gl. Removed Removed  DeckScene  construcor parameters: data  removed. Instead users should manage their data loading on their own. lengthMs  removed. Instead provide timecode parameter to  DeckAdapter.render . currentCamera  removed. Instead manage  viewState  externally and set camera keyframes with  DeckScene.setCameraKeyframes . animationLoop  removed. Instead provide a luma.gl  timeline . renderLayers  removed. Instead either directly supply deckgl with layers, or provide a getLayers accessor,  DeckAdapter.getProps({getLayers}) , when it’s necessary to access keyframes for animated layers. keyframes  removed. Instead they can be initialized with  initialKeyframes  parameter and updated with  setKeyframes , and  setCameraKeyframes  methods. Encoder  base class removed. Use  FrameEncoder  instead. DeckAdapter.preview  removed. Use  DeckAdapter.render({Encoder: PreviewEncoder})  instead. Changed DeckAdapter.render ,  DeckAdapter.getProps , and  DeckScene  constructor expect object wrapped parameters now. DeckAdapter.render({encoderSettings})  is now split up into three objects: formatConfigs , to config settings for specific formats (I.e. jpeg quality) timecode , to specify render start and end times as well as framerate. filename , to specify the file name when rendering to a downloaded file. Deprecations Frame definition pattern in  frame.js  should no longer be used. Will be removed in next release. Keyframes.setActiveKeyframes  is now private  Keyframes._setActiveKeyframes , and should not be used.","headings":[{"value":"Whats New","depth":1},{"value":"1.0.1","depth":2},{"value":"1.1.0","depth":2},{"value":"1.2.0","depth":2},{"value":"Added","depth":3},{"value":"React","depth":4},{"value":"Examples","depth":4},{"value":"Removed","depth":3},{"value":"Changed","depth":3},{"value":"Deprecations","depth":3}],"slug":"docs/whats-new","title":"Whats New"},{"excerpt":"DeckAdapter Constructor Parameters sceneBuilder  ( (timeline) => Promise<DeckScene> | DeckScene ) Function to build scene, async or sync. See  DeckScene  for more information. Methods getProps({deckRef, setReady, onNextFrame, getLayers, extraProps}): props Supplies deck.gl properties from hubble.gl. Parameters: deckRef  ( React.RefObject ) - React ref eventually containing a  deck  object. setReady  ( (ready: boolean) => void , Optional) - Callback indicating webgl, scene, and deck are loaded. Scene is ready for rendering. onNextFrame  ( (nextTimeMs: number) => void , Optional) - Callback indicating the next frame in a rendering should be displayed. getLayers  ( (scene: DeckScene) => any[] , Optional) - Callback to construct deck.gl layers provided the scene. If set,  deck.layers  will be set to the layers returned by this function. extraProps  ( DeckGlProps , Optional) - Apply extra props to deckgl. Note: Hubble will override props as needed. render({getCameraKeyframes, Encoder, formatConfigs, onStop, getKeyframes}) Start rendering. Parameters: getCameraKeyframes  ( () => CameraKeyframes , Optional) - Default:  undefined . This function is used to access the camera's keyframes, and is called just prior to rendering. getKeyframes  ( () => Object<string, Keyframes> , Optional) - Default:  undefined . This function is called after the last frame is rendered and a file is created for download. It does not get called when a render is interrupted with  stop() . Encoder  ( typeof FrameEncoder , Optional) - Default:  PreviewEncoder . Provide a FrameEncoder class for capturing deck canvas. See  Encoders Overview  for options. formatConfigs  ( Object , Optional) - Default:  {} . See  FrameEncoder  for internal defaults. timecode  ( {start: number, end: number, framerate: number} ) The start and end time in milliseconds to render, as well as a framerate. filename  ( string , Optional) - Default: UUID. onStop  ( () => void , Optional) - Default:  undefined . stop(callback) Interrupt rendering and saves partial result. This is useful for handling user interruptions. Parameters: callback  ( () => void , Optional) - Callback indicating the rendering is finished. seek({timeMs, getCameraKeyframes, getKeyframes}) Move time to set a new position. Useful for peeking at different times in an animation without rendering. Parameters: timeMs  ( number ) getCameraKeyframes  ( () => CameraKeyframes , Optional) - Default:  undefined . This function is used to access the camera's keyframes, and is called just prior to rendering. getKeyframes  ( () => Object<string, Keyframes> , Optional) - Default:  undefined . This function is called after the last frame is rendered and a file is created for download. It does not get called when a render is interrupted with  stop() . Source modules/main/src/adapters/deck-adapter.js","headings":[{"value":"DeckAdapter","depth":1},{"value":"Constructor","depth":2},{"value":"Parameters","depth":2},{"value":"sceneBuilder ((timeline) => Promise<DeckScene> | DeckScene)","depth":5},{"value":"Methods","depth":2},{"value":"getProps({deckRef, setReady, onNextFrame, getLayers, extraProps}): props","depth":5},{"value":"render({getCameraKeyframes, Encoder, formatConfigs, onStop, getKeyframes})","depth":5},{"value":"stop(callback)","depth":5},{"value":"seek({timeMs, getCameraKeyframes, getKeyframes})","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/deck-adapter","title":"DeckAdapter"},{"excerpt":"API Overview Adapter DeckAdapter Scene DeckScene","headings":[{"value":"API Overview","depth":1},{"value":"Adapter","depth":4},{"value":"Scene","depth":4}],"slug":"docs/api-reference","title":"API Overview"},{"excerpt":"Overview Keyframes are responsible for interpolating between values over the course of your animation. Hubble.gl keyframes use luma.gl's keyframe engine. See  luma.gl Keyframes  for more information.  Keyframes  objects should be constructed for each object being animated, such as each deck.gl  Viewport  or  Layer . It's very straightforward to define new kinds of  Keyframe  classes, so hubble.gl only provides a few very popular examples. Keyframes All keyframe classes inherit from the hubble.gl  Keyframes  base class. CameraKeyframes LayersKeyframes All layer keyframe classes inherit from the  LayerKeyframes  base class. Each instance is associated with a deck.gl  layerId . ScatterPlotLayerKeyframes GridLayerKeyframes","headings":[{"value":"Overview","depth":1},{"value":"Keyframes","depth":5},{"value":"LayersKeyframes","depth":5}],"slug":"docs/api-reference/keyframe","title":"Overview"},{"excerpt":"DeckScene Usage Constructor Parameters: timeline  (Object) A lumagl  timeline  object. initialKeyframes  (Object<string, Keyframes>) An initial set of keyframes. If they are static, supply them here. If the ever need to update, call  scene.setKeyframes . Methods getLayers  ( ((scene: DeckScene) => any[]) => any[] ) A callback function to create deckgl layer objects provided the scene object. Returns: Array  of deck.gl layers. setKeyframes  ( Object ) Keyframe objects registered to the Timeline. camera  ( CameraKeyframes , Optional) - supply a camera animation. If set,  deck.viewState  will be set with this keyframe object. Add additional keyframe objects to the object. The object is accessible in  getLayers  function via  scene.keyframes . Remarks camera  is a reserved object key within  keyframes . Source modules/core/src/scene/deck-scene.js","headings":[{"value":"DeckScene","depth":1},{"value":"Usage","depth":2},{"value":"Constructor","depth":2},{"value":"timeline (Object)","depth":5},{"value":"initialKeyframes (Object<string, Keyframes>)","depth":5},{"value":"Methods","depth":2},{"value":"getLayers (((scene: DeckScene) => any[]) => any[])","depth":5},{"value":"setKeyframes (Object)","depth":5},{"value":"Remarks","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/scene/deck-scene","title":"DeckScene"},{"excerpt":"Keyframes The Keyframes class extends the luma.gl  Keyframes  class and offers many additional features on top of luma's. In your application, extend from hubble.gl's Keyframes as shown in the  CameraKeyFrames  example. Add  features  to animate, such as  latitude . When designing your scene, keyframe values are required for each feature you define. Usage Constructor Parameters: features  ( Array<string> ) - An array of features to animate. timings  ( Array<number> ) - \"N\" timestamps for beginning of keyframe. keyframes  ( Array<Object> ) - \"N\" camera objects to transition between. Each  feature  is a key in this object. The value defines the animation. easings  ( Array<() => void ) - \"N-1\" easing functions between keyframes. Methods getFrame Returns: Object  - Each  feature  key will be defined and the value will be the current interpolated value of the frame at the current internal time. More Info See  luma.gl Keyframes  for more information.","headings":[{"value":"Keyframes","depth":1},{"value":"Usage","depth":2},{"value":"Constructor","depth":2},{"value":"Methods","depth":2},{"value":"getFrame","depth":5},{"value":"More Info","depth":2}],"slug":"docs/api-reference/keyframe/keyframes","title":"Keyframes"},{"excerpt":"CameraKeyframes Keyframes to control camera. Inherits from  Keyframes . Usage Constructor Parameters: timings  ( Array<number> ) - \"N\" timestamps for beginning of keyframe. keyframes  ( Array<Object> ) - \"N\" camera objects to transition between. longitude  (Number) latitude  (Number) zoom  (Number) pitch  (Number) bearing  (Number) easings  ( Array<() => void ) - \"N-1\" easing functions between keyframes. More Info See hubble.gl Keyframes and  luma.gl Keyframes  for more information.","headings":[{"value":"CameraKeyframes","depth":1},{"value":"Usage","depth":2},{"value":"Constructor","depth":2},{"value":"More Info","depth":2}],"slug":"docs/api-reference/keyframe/camera-keyframes","title":"CameraKeyframes"},{"excerpt":"Overview Encoders are used to capture frames of an HTML canvas and construct them into videos. They're constructed and configured internally before each video capture. During capture, they provide asynchronous functions for adding frames and saving videos. See  DeckAdapter.render  for usage. Video All encoder classes inherit from the  FrameEncoder  class. WebMEncoder GIFEncoder StreamEncoder PNGSequenceEncoder JPEGSequenceEncoder Utility PreviewEncoder Attributions Encoders started as a fork of  CCapture.js , which is under MIT license.","headings":[{"value":"Overview","depth":1},{"value":"Video","depth":5},{"value":"Utility","depth":5},{"value":"Attributions","depth":3}],"slug":"docs/api-reference/encoder","title":"Overview"},{"excerpt":"LayerKeyframes The  LayerKeyframes  class extends the hubble.gl  Keyframes  class and offers support for animating deck.gl layers. In your application, extend from  LayerKeyframes  as shown in the  ScatterPlotLayerKeyframes  example. Add  features  to animate, such as  radius . When designing your scene, keyframe values are required for each feature you define. When constructing anything based on  LayerKeyframes  the  layerId  property may be provided, which should match the layer id of the deck.gl layer you're animating. Usage Constructor Parameters: layerId  ( string ) - deck.gl layer id. features  ( Array<string> ) - An array of features to animate. timings  ( Array<number> ) - \"N\" timestamps for beginning of keyframe. keyframes  ( Array<Object> ) - \"N\" camera objects to transition between. Each  feature  is a key in this object. The value defines the animation. easings  ( Array<() => void ) - \"N-1\" easing functions between keyframes. More Info See hubble.gl Keyframes and  luma.gl Keyframes  for more information.","headings":[{"value":"LayerKeyframes","depth":1},{"value":"Usage","depth":2},{"value":"Constructor","depth":2},{"value":"More Info","depth":2}],"slug":"docs/api-reference/keyframe/layer-keyframes","title":"LayerKeyframes"},{"excerpt":"GifEncoder A GIF animated photo format encoder that inherits  FrameEncoder . Constructor Construction of the encoder class is not required. Refer to  DeckAdapter.render  for usage. The constructor accepts a  FrameEncoderSettings  object. FrameEncoderSettings In addition to the top level  FrameEncoder  settings, these settings are available under the  gif  namespace. width  - The width in pixels the GIF is scaled to. Defaults to 720. height  - The height in pixels the GIF is scaled to. Defaults to 480. numWorkers  - The number of web workers concurrently encoding frames. Defaults to 4. sampleInterval  - Pixels to skip when creating the palette. Default is 10. Less is better, but slower. Members extension  -  \".gif\" mimeType  -  \"image/gif\" options  - The object under the  gif  namespace in the  FrameEncoder  settings, see above. Source modules/core/src/encoders/video/gif-encoder.js Attributions GifEncoder is a wrapper around the loaders.gl  GIFBuilder , which is under MIT license.","headings":[{"value":"GifEncoder","depth":1},{"value":"Constructor","depth":2},{"value":"FrameEncoderSettings","depth":2},{"value":"Members","depth":2},{"value":"Source","depth":2},{"value":"Attributions","depth":3}],"slug":"docs/api-reference/encoder/gif-encoder","title":"GifEncoder"},{"excerpt":"FrameEncoder A base class for encoders. Custom frame encoders may be implemented and used by Hubble as new capture technologies advance, or uncommon use cases need to be implemented. Constructor Parameters: settings  (Object) framerate  ( number , Optional) - framerate of rendered video. Defaults to 30. See encoders for additional namespaced settings. Members extension  (String) File extension. Default:  \"\" mimeType  (String) Default:  \"\" MIME type. See  Common MIME types quality  (Number) Default:  0.8 Generic quality value. For canvas capture see  HTMLCanvasElement.toDataURL framerate  (Number) Default:  30 Methods start() Initialize a capture and flush the existing encoder state. add(canvas: HTMLCanvasElement):  Promise<void> Add a canvas frame to an in-progress capture. Parameters: canvas  ( HTMLCanvasElement ) - The canvas to capture. Returns: Promise<void>  - Add is an async function. The promise will resolve when the frame capture is complete. save(): Promise<Blob | ArrayBuffer> Compile a video of the captured frames. Returns: Promise<Blob | ArrayBuffer>  - Save is an async function. The promise will resolve when the video is compiled and will contain a  Blob  or  ArrayBuffer  of the video content. See individual encoders for more details. Source modules/core/src/encoders/frame-encoder.js","headings":[{"value":"FrameEncoder","depth":1},{"value":"Constructor","depth":2},{"value":"Members","depth":2},{"value":"extension (String)","depth":5},{"value":"mimeType (String)","depth":5},{"value":"quality (Number)","depth":5},{"value":"framerate (Number)","depth":5},{"value":"Methods","depth":2},{"value":"start()","depth":5},{"value":"add(canvas: HTMLCanvasElement): Promise<void>","depth":5},{"value":"save(): Promise<Blob | ArrayBuffer>","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/encoder/frame-encoder","title":"FrameEncoder"},{"excerpt":"PNGSequenceEncoder A photo sequence encoder that inherits  FrameEncoder . Saves each frame as a photo contained in a  \".tar\"  archive. Constructor Construction of the encoder class is not required. Refer to  DeckAdapter.render  for usage. The constructor accepts a  FrameEncoderSettings  object. Notes: PNG supports alpha channel and will produce the highest quality encoding. Convert PNGs to a video with ffmpeg or a proprietary encoder, like Adobe Media Encoder. Members extension  -  \".png\" mimeType  -  \"image/png\" Source modules/core/src/encoders/video/png-sequence-encoder.js","headings":[{"value":"PNGSequenceEncoder","depth":1},{"value":"Constructor","depth":2},{"value":"Members","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/encoder/png-sequence-encoder","title":"PNGSequenceEncoder"},{"excerpt":"JPEGSequenceEncoder A photo sequence encoder that inherits  FrameEncoder . Saves each frame as a photo contained in a  \".tar\"  archive. Constructor Construction of the encoder class is not required. Refer to  DeckAdapter.render  for usage. The constructor accepts a  FrameEncoderSettings  object. FrameEncoderSettings In addition to the top level  FrameEncoder  settings, these settings are available under the  jpeg  namespace. quality  - See member note. Defaults to 0.8. Members extension  -  \".jpeg\" mimeType  -  \"image/jpeg\" quality  - See  HTMLCanvasElement.toDataURL Source modules/core/src/encoders/video/jpeg-sequence-encoder.js","headings":[{"value":"JPEGSequenceEncoder","depth":1},{"value":"Constructor","depth":2},{"value":"FrameEncoderSettings","depth":2},{"value":"Members","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/encoder/jpeg-sequence-encoder","title":"JPEGSequenceEncoder"},{"excerpt":"PreviewEncoder A utility encoder is used to quickly preview animations in the browser that inherits  FrameEncoder . It doesn't produce file artifacts or capture the canvas. Constructor Construction of the encoder class is not required. Refer to  DeckAdapter.render  for usage. The constructor accepts a  FrameEncoderSettings  object. Usage Source modules/core/src/encoders/utils/preview-encoder.js","headings":[{"value":"PreviewEncoder","depth":1},{"value":"Constructor","depth":2},{"value":"Usage","depth":1},{"value":"Source","depth":2}],"slug":"docs/api-reference/encoder/preview-encoder","title":"PreviewEncoder"},{"excerpt":"WebmEncoder A WebM video format encoder that inherits  FrameEncoder . Constructor Construction of the encoder class is not required. Refer to  DeckAdapter.render  for usage. The constructor accepts a  FrameEncoderSettings  object. FrameEncoderSettings In addition to the top level  FrameEncoder  settings, these settings are available under the  webm  namespace. quality  - See member note. Defaults to 0.8. Members extension  -  \".webm\" mimeType  -  \"video/webm\" Source modules/core/src/encoders/video/webm-encoder.js Attributions WebmEncoder is a wrapper around the  webm-writer , which is under WTFPLv2 license, for WebM video construction.","headings":[{"value":"WebmEncoder","depth":1},{"value":"Constructor","depth":2},{"value":"FrameEncoderSettings","depth":2},{"value":"Members","depth":2},{"value":"Source","depth":2},{"value":"Attributions","depth":3}],"slug":"docs/api-reference/encoder/webm-encoder","title":"WebmEncoder"}]}},"staticQueryHashes":["484347790"]}