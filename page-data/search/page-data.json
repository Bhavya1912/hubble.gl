{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Upgrade Guide","rawMarkdownBody":"# Upgrade Guide\n","slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"Post Processing Workflow Video editors and presentation software can be used to add text, dissolve between clips, and combine multiple…","rawMarkdownBody":"# Post Processing Workflow\n\nVideo editors and presentation software can be used to add text, dissolve between clips, and combine multiple renderings. While there are probably methods to incorporate many post processing techniques we've used into the web browser, there are many benefits afforded from using existing tools for certain parts of your animation workflow. This document aims to breakdown our workflow and walk you through the steps taken _after_ a render completes.\n\n## Adding Text and Graphics\n\nThe most common post processing needed is some kind of text annotation to contextualize what your audience is looking at. For presentations, we recommend adding text or simple graphical elements, such as a legend, within your presentation software, such as Google Slides or Apple Keynote. This enables much faster iteration on copy and typographic design between you and your team compared to rendering and importing again after every text change.\n\n<!-- TODO: In this example, [24hr timeline] -->\n\n> For example, presentation software was used to add text and an animated timeline synced with the data being displayed.\n\n## Pacing Animations with your Speaker\n\nWhile presentations are usually rehearsed and carefully planned, they are _live_ performances. That means the speaker expects to have control over their pacing as they guide their audience through a story. If planned for up front, splitting animations up into multiple slides is an easy way to give your speaker this control without adding much additional complexity to your program.\n\nTo do this, match your camera positions up at the end of one slide and the start of the next. To avoid unpolished transitions between slides, make each clip shorter than the speakers time spent on the slide and simply freeze on the last frame of the video when it ends.\n\n<!-- TODO: In this example, [Downtown *click* to John Wayne] -->\n\n> For example, the clip pauses after each camera motion is finished and the speaker clicks to activate the next slide.\n\n## Combining Clips\n\nRevealing new visuals within a single clip can have a great effect for your audience. Usually animating opacity within hubble.gl is sufficient, but in some situations, such as transitioning between base maps using a video editor is the easiest way to produce the effect.\n\nPlan to capture multiple renderings with hubble.gl for each phase of your clip. Ensure they use the same camera motion and encoder settings. Line clips up in your video editor to dissolve between them.\n\n<!-- TODO: In this example, [add LAX breakdown slide] -->\n\n> For example, the base map and bar styles transition to reveal the points of interest at this location.\n\nA quick note on video editors, pay attention to video export settings and try to avoid losing quality during an export. <!-- TODO: Check out rendering tips to learn more. -->","slug":"docs/post-processing","title":"Post Processing Workflow"},{"excerpt":"Introduction Hubble.gl is a JavaScript library for animating data visualizations. High Quality Video: Guaranteed smooth framerates, high…","rawMarkdownBody":"# Introduction\n\nHubble.gl is a JavaScript library for animating data visualizations.\n\n- **High Quality Video:** Guaranteed smooth framerates, high resolutions, and a variety of formats. Render the quality you want at the speed you need it. Fine tune timing and look with keyframe markers and render everything in the same app.\n\n- **Easy Integration:** Stand up scenes within deck.gl or kepler.gl, then animate any aspect of it. Empower users to animate without code with UI components included in this library.\n\n- **Client Side Library:** Videos render and encode directly in the web browser. User data never leaves their machine. Since nothing runs on a server sites can scale without computation costs.\n\n## Installation\n\n```\nnpm install hubble.gl\n```\n\n## Basic Scene\n\nTo create an animation and render you will need to first create a [deck.gl](https://deck.gl/docs/get-started/getting-started) or [kepler.gl](https://docs.kepler.gl/#basic-usage) project. Then you will need to create a `sceneBuilder` function for each scene where you'll define all of the elements of your animation, including any async data fetching.\n\n```js\n// scene.js\nimport {DeckScene, CameraKeyframes} from 'hubble.gl';\nimport {LineLayer} from '@deck.gl/layers';\nimport {easing} from 'popmotion';\n\nfunction renderLayers(scene) {\n  return [\n    new LineLayer({id: 'line-layer', data: scene.data})\n  ]\n}\n\nfunction getKeyframes(animationLoop, data) {\n  const camera = new CameraKeyframes({\n    timings: [0, 5000],\n    keyframes: [\n      {\n        latitude: 37.7853,\n        longitude: -122.41669,\n        zoom: 11.5,\n        bearing: 140,\n        pitch: 60\n      },\n      {\n        latitude: 37.7853,\n        longitude: -122.41669,\n        zoom: 11.5,\n        bearing: 0,\n        pitch: 30\n      }\n    ],\n    easings: [easing.easeInOut]\n  });\n  animationLoop.timeline.attachAnimation(camera);\n\n  return {\n    camera\n  };\n}\n\nexport function sceneBuilder(animationLoop) {\n  const lengthMs = 5000;\n  const data = [{sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}];\n  const keyframes = getKeyframes(animationLoop, data);\n  return new DeckScene({animationLoop, keyframes, data, renderLayers, lengthMs, width: 1920, height: 1080});\n}\n```\n\n## Using With React\n\nWith a `sceneBuilder` in hand, create a `DeckAdapter` and choose a `FrameEncoder` for rendering a variety of video and image sequence formats. Hubble.gl provide a `useNextFrame` hook for React.js, which is used to trigger a update when necessary.\n\n```js\n// app.js\nimport React, {useState, useRef} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {DeckAdapter, WebMEncoder} from 'hubble.gl';\nimport {useNextFrame, BasicControls} from '@hubble.gl/react';\nimport {sceneBuilder} from './scene';\n\nconst adapter = new DeckAdapter(sceneBuilder, WebMEncoder);\n\n/** @type {import('@hubble.gl/core/src/types').FrameEncoderSettings} */\nconst encoderSettings = {\n  framerate: 30\n}\n\nexport default function App() {\n  const deckgl = useRef(null);\n  const [ready, setReady] = useState(false);\n  const [busy, setBusy] = useState(false);\n  const nextFrame = useNextFrame();\n\n  return (\n    <div style={{position: 'relative'}}>\n      <DeckGL\n        ref={deckgl}\n        {...adapter.getProps(deckgl, setReady, nextFrame)}\n      />\n      <div style={{position: 'absolute'}}>{ready && <BasicControls adapter={adapter} busy={busy} setBusy={setBusy} encoderSettings={encoderSettings}/>}</div>\n    </div>\n  );\n}\n```\n\n\n","slug":"docs","title":"Introduction"},{"excerpt":"Whats New 1.0.1 Initial release. 1.1.0 (draft) Encoders are constructed right before rendering starts, instead of only when a scene is…","rawMarkdownBody":"# Whats New\n\n## 1.0.1\n\nInitial release.\n\n## 1.1.0 (draft)\n\n- Encoders are constructed right before rendering starts, instead of only when a scene is defined. [#1](https://github.com/uber/hubble.gl/pull/1)\n- DeckAdapter.render now accepts a onStop callback.\n- Remove stop and dispose from FrameEncoders [#3](https://github.com/uber/hubble.gl/pull/3)\n- Allow PNGEncoder transparent frames [#4](https://github.com/uber/hubble.gl/pull/4)\n- Refactor encoder settings and scene settings api [#8](https://github.com/uber/hubble.gl/pull/8)\n  - scene settings are defined at scene load time, so you can set scene resolution and animation length there.\n  - encoder settings are defined before every render, so you can set seek options there.\n  - format-specific encoder settings are namespaced by encoder (`jpeg` settings are under `jpeg`, etc..).\n- Gif Encoder [#7](https://github.com/uber/hubble.gl/pull/7)","slug":"docs/whats-new","title":"Whats New"},{"excerpt":"Rendering Tips","rawMarkdownBody":"# Rendering Tips\n\n","slug":"docs/rendering-tip","title":"Rendering Tips"},{"excerpt":"@hubble.gl/react These are hubble.gl's react library classes. See hubble.gl for documentation.","rawMarkdownBody":"# @hubble.gl/react\n\nThese are hubble.gl's react library classes.\n\nSee [hubble.gl](https://uber.github.io/hubble.gl) for documentation.","slug":"modules/react","title":"@hubble.gl/react"},{"excerpt":"API Overview Adapter DeckAdapter Scene DeckScene","rawMarkdownBody":"# API Overview\n\n#### Adapter\n\n - [DeckAdapter](/modules/core/docs/deck-adapter)\n\n#### Scene\n\n - [DeckScene](/modules/core/docs/scene/deck-scene)\n\n\n\n","slug":"modules/core/docs","title":"API Overview"},{"excerpt":"@hubble.gl/core These are hubble.gl's core library classes. See hubble.gl for documentation.","rawMarkdownBody":"# @hubble.gl/core\n\nThese are hubble.gl's core library classes.\n\nSee [hubble.gl](https://uber.github.io/hubble.gl) for documentation.","slug":"modules/core","title":"@hubble.gl/core"},{"excerpt":"DeckAdapter Constructor Parameters  () Function to build scene, async or sync. See DeckScene for more information. Methods  Supplies deck.gl…","rawMarkdownBody":"# DeckAdapter\n\n## Constructor\n\n```js\nnew DeckAdapter(sceneBuilder);\n```\n\n## Parameters\n\n##### `sceneBuilder` (`(animationLoop) => Promise<DeckScene> | DeckScene`)\n\nFunction to build scene, async or sync. See [DeckScene](/modules/core/docs/scene/deck-scene) for more information.\n\n```js\nasync function sceneBuilder(animationLoop) {\n  // See DeckScene API Reference for more info\n  const data = await fetch(...)\n  const keyframes = {}\n  const renderLayers = ...\n  const lengthMs = 5000 // ms\n  const width = 1920 // px\n  const height = 1080 // px\n  return new DeckScene({animationLoop, keyframes, data, renderLayers, lengthMs, width, height})\n}\n```\n\n## Methods\n\n##### `getProps`\n\nSupplies deck.gl properties from hubble.gl.\n\nParameters:\n\n* `deckRef` (`React.RefObject`) - React ref eventually containing a `deck` object.\n\n* `setReady` (`(ready: boolean) => void`) - Callback indicating webgl, scene, and deck are loaded. Scene is ready for rendering.\n\n* `onNextFrame` (`(nextTimeMs: number) => void`) - Callback indicating the next frame in a rendering should be displayed.\n\n##### `render`\n\nStart rendering.\n\nParameters:\n\n* `Encoder` (`typeof FrameEncoder`, Optional) - Default: `PreviewEncoder`. FrameEncoder class for capturing deck canvas. See [Encoders](/docs/encoder)\n\n* `encoderSettings` (`FrameEncoderSettings`, Optional) - Default: `{}` (See [Encoder Overview](/docs/encoder) for internal defaults)\n\n##### `stop`\n\nStop rendering and save.\n\nParameters:\n\n* `callback` (`() => void`, Optional) - Callback indicating the rendering is finished.\n\n## Source\n\n[modules/main/src/adapters/deck-adapter.js](https://github.com/uber/hubble.gl/blob/master/modules/main/src/adapters/deck-adapter.js)\n","slug":"modules/core/docs/deck-adapter","title":"DeckAdapter"},{"excerpt":"DeckScene Usage Constructor Parameters:  (Object) A deckgl  object.  (Number) Total length of scene in milliseconds.  (Object) Keyframe…","rawMarkdownBody":"# DeckScene\n\n## Usage\n\n```js\nconst length = 5000 // ms\n\nconst keyframes = {\n  // Camera is optional unless animating the deck.gl viewState\n  camera: new CameraKeyframes({...}) // camera is a reserved key\n}\n// Attach each keyframe object to timeline.\nanimationLoop.timeline.attachAnimation(keyframes.camera);\n\n// Optional unless animating deck.gl layer properties.\nconst data = {\n  line: [{sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}],\n  arc: [{sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}]\n}\n// Optional unless animating deck.gl layer properties.\nconst renderLayers = (scene) => {\n  return [\n    new LineLayer({ id: 'line-layer', data: scene.data.line }),\n    new ArcLayer({ id: 'arc-layer', data: scene.data.arc })\n  ]\n}\n\nconst scene = new DeckScene({\n  animationLoop,  \n  length, \n  keyframes, \n  data,          // optional\n  renderLayers   // optional\n});\n```\n\n## Constructor\n\n```js\nnew DeckScene({animationLoop, length, keyframes, data, renderLayers});\n```\n\nParameters:\n\n##### `animationLoop` (Object)\n\nA deckgl `animationLoop` object.\n\n##### `length` (Number)\n\nTotal length of scene in milliseconds.\n\n##### `keyframes` (Object)\n\nKeyframe objects registered to the animationLoop timeline.\n\n- `camera` (`CameraKeyframes`, Optional) - supply a camera animation. If set, `deck.viewState` will be set with this keyframe object.\n\n- Add additional keyframe objects to the object.\n\nAttach each individual keyframe object to the timeline with `animationLoop.timeline.attachAnimation(...)`\n\n##### `data` (Object, Optional)\n\nAn object of data used to render layers.\n\nIf set, the object is accessible in `renderLayers` function via `scene.data`.\n\n##### `renderLayers` (`(scene: DeckScene) => any[]`, Optional)\n\n* Default: `undefined`\n\nA function to create deckgl layer objects provided the scene object after it is constructed.\n\nIf set, `deck.layers` will be set to the layers returned by this function.\n\n## Methods\n\n##### `renderLayers`\n\nReturns:\n\nIf constructed with `renderLayers` parameter it returns `Array` of deck.gl layers, otherwise returns `undefined`\n\n##### `hasLayers`\n\nReturns:\n\n`Boolean` where `true` when constructed with `renderLayers` parameter, otherwise false.\n\n## Remarks\n\n- Individual keyframe objects must be attached to the timeline prior to recording with `animationLoop.timeline.attachAnimation(...)`.\n- `camera` is a reserved object key within `keyframes`.\n\n\n## Source\n\n[modules/core/src/scene/deck-scene.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/scene/deck-scene.js)\n","slug":"modules/core/docs/scene/deck-scene","title":"DeckScene"},{"excerpt":"CameraKeyframes Keyframes to control camera. Inherits from . Usage Constructor Parameters:  () - \"N\" timestamps for beginning of keyframe…","rawMarkdownBody":"# CameraKeyframes\n\nKeyframes to control camera. Inherits from `Keyframes`.\n\n## Usage\n\n```js\nconst keyframes = {\n  camera: new CameraKeyframes({timings, keyframes, easings});\n}\n// Attach each keyframe object to timeline.\nanimationLoop.timeline.attachAnimation(keyframes.camera);\n```\n\n## Constructor\n\nParameters:\n\n* `timings` (`Array<number>`) - \"N\" timestamps for beginning of keyframe.\n\n* `keyframes` (`Array<Object>`) - \"N\" camera objects to transition between.\n\n  * `longitude` (Number)\n\n  * `latitude` (Number)\n\n  * `zoom` (Number)\n\n  * `pitch` (Number)\n\n  * `bearing` (Number)\n\n* `easings` (`Array<() => void`) - \"N-1\" easing functions between keyframes.","slug":"modules/core/docs/keyframe/camera-keyframes","title":"CameraKeyframes"},{"excerpt":"Overview All keyframe classes inherit from the  base class. Keyframes CameraKeyframes Layers All layer keyframe classes inherit from the…","rawMarkdownBody":"# Overview\n\nAll keyframe classes inherit from the [`Keyframes`]() base class.\n\n - Keyframes\n\n - CameraKeyframes\n\n##### Layers\n\nAll layer keyframe classes inherit from the [`LayerKeyframes`]() base class. Each instance is associated with a deck.gl layerId.\n\n - ScatterPlotLayerKeyframes\n\n - GridLayerKeyframes","slug":"modules/core/docs/keyframe","title":"Overview"},{"excerpt":"Keyframes","rawMarkdownBody":"# Keyframes","slug":"modules/core/docs/keyframe/keyframes","title":"Keyframes"},{"excerpt":"LayerKeyframes","rawMarkdownBody":"# LayerKeyframes","slug":"modules/core/docs/keyframe/layer-keyframes","title":"LayerKeyframes"},{"excerpt":"This project is experimental and the APIs may change. Build Status Hubble.gl Hubble.gl is a JavaScript library for animating data…","rawMarkdownBody":"This project is experimental and the APIs may change. [![Build Status](https://travis-ci.com/uber/hubble.gl.svg?token=PtHeXeSzaZyx3BjJ7DmZ&branch=master)](https://travis-ci.com/uber/hubble.gl)\n# Hubble.gl\n\nHubble.gl is a JavaScript library for animating data visualizations.\n\n- **High Quality Video:** Ensured framerates, high resolutions, and a variety of formats. Fine tune animations with keyframe markers and easings.\n\n- **Easy Integration:** Stand up scenes within deck.gl or kepler.gl, then animate any aspect of it. Empower users to animate without code with UI components powered by this library.\n\n- **Client Side Library:** Render within the browser without a backend. User data never leaves their machine. Since nothing runs on a server sites can scale without backend encoders.\n\n## Installation\n\n```\nnpm install hubble.gl\n```\n\n## Documentation\n\nYou can find the Hubble.gl documentation [on the website](https://uber.github.io/hubble.gl/docs).\n\n## Examples\n\nWe have examples [on the website](https://uber.github.io/hubble.gl/examples).\n\n## Contributing\n\nThe main purpose of this repository is to continue to evolve Hubble.gl core, making it faster and easier to use. Development of Hubble.gl happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving Hubble.gl.\n\n### Code Of Conduct\n\nUber has adopted a Code of Conduct that we expect project participants to adhere to. Please read the [full text](/CODE_OF_CONDUCT.md) so that you can understand what actions will and will not be tolerated.\n\n### Contributing Guide\n\nRead our [contributing guide](/CONTRIBUTING.md) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Hubble.gl.\n\n### License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n","slug":"modules/main","title":"is project is experimental and the APIs may change. [![Build Status](https://travis-ci.com/uber/hubble.gl.svg?token=PtHeXeSzaZyx3BjJ7DmZ&branch=master)](https://travis-ci.com/uber/hubble.gl)"},{"excerpt":"FrameEncoder A base class for encoders that implements the  abstract class. Constructor Parameters:  (Number, Optional)  (Number, Optional…","rawMarkdownBody":"# FrameEncoder\n\nA base class for encoders that implements the `Encoder` abstract class.\n\n## Constructor\n\nParameters:\n\n* `quality` (Number, Optional)\n\n* `framerate` (Number, Optional)\n\n\n## Members\n\n##### `extension` (String)\n\nFile extension.\n\n* Default: `\"\"`\n\n##### `mimeType` (String)\n\n* Default: `\"\"`\n\nMIME type. See [Common MIME types](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)\n\n##### `quality` (Number)\n\n* Default: `0.8`\n\nGeneric quality value. For canvas capture see [HTMLCanvasElement.toDataURL](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n##### `framerate` (Number)\n\n* Default: `30`\n\n## Methods\n\n##### `getMimeType`\n\nReturns:\n\n`string` of mime type.\n\n## Source\n\n[modules/core/src/encoders/frame-encoder.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/encoders/frame-encoder.js)","slug":"modules/core/docs/encoder/frame-encoder","title":"FrameEncoder"},{"excerpt":"JPEGSequenceEncoder A photo sequence encoder that inherits TarEncoder. Saves each frame as a photo contained in a  archive…","rawMarkdownBody":"# JPEGSequenceEncoder\n\nA photo sequence encoder that inherits [TarEncoder](). Saves each frame as a photo contained in a `\".tar\"` archive.\n\n## FrameEncoderSettings\n\nIn addition to the top level [FrameEncoderSettings](/docs/encoder), these settings are available under the `jpeg` namespace.\n\n* `quality` - See member note. Defaults to 0.8. \n\n## Members\n\n* `extension` - `\".jpeg\"`\n\n* `mimeType` - `\"image/jpeg\"`\n\n* `quality` - See [HTMLCanvasElement.toDataURL](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n## Source\n\n[modules/core/src/encoders/video/jpeg-sequence-encoder.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/encoders/video/jpeg-sequence-encoder.js)","slug":"modules/core/docs/encoder/jpeg-sequence-encoder","title":"JPEGSequenceEncoder"},{"excerpt":"PreviewEncoder A utility encoder is used to quickly preview animations in the browser that inherits FrameEncoder. It doesn't produce file…","rawMarkdownBody":"# PreviewEncoder\n\nA utility encoder is used to quickly preview animations in the browser that inherits [FrameEncoder](). It doesn't produce file artifacts or capture the canvas.\n\n# Usage\n\n```js\nimport {DeckAdapter, PreviewEncoder} from '@hubble.gl/core'\nnew DeckAdapter(sceneBuilder, PreviewEncoder);\n```\n\n## Source\n\n[modules/core/src/encoders/utils/preview-encoder.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/encoders/utils/preview-encoder.js)","slug":"modules/core/docs/encoder/preview-encoder","title":"PreviewEncoder"},{"excerpt":"Overview FrameEncoderSettings  (, Optional) - Offset the animation. Defaults to 0.  (, Optional) - Set to render a smaller duration than the…","rawMarkdownBody":"# Overview\n\n### FrameEncoderSettings\n\n* `startOffsetMs` (`number`, Optional) - Offset the animation. Defaults to 0.\n\n* `durationMs` (`number`, Optional) - Set to render a smaller duration than the whole clip. Defaults to scene length.  \n  \n* `filename`(`string`, Optional) - Filename for rendered video. Defaults to UUID.\n\n* `framerate` (`number`, Optional) - framerate of rendered video. Defaults to 30.\n\nSee encoders for additional namespaced settings.\n\n##### Video\n\nAll encoder classes implement the [`Encoder`]() abstract class and inherit from the [`FrameEncoder`]() or [`TarEncoder`]() base classes.\n\n - WebMEncoder\n\n - StreamEncoder\n\n - PNGSequenceEncoder\n\n - JPEGSequenceEncoder\n\n##### Utility\n\n - PreviewEncoder\n","slug":"modules/core/docs/encoder","title":"Overview"},{"excerpt":"TarEncoder A base class for encoders that export multiple file artifacts, such as image sequence encoders. Inherits FrameEncoder. Members…","rawMarkdownBody":"# TarEncoder\n\nA base class for encoders that export multiple file artifacts, such as image sequence encoders. Inherits [FrameEncoder]().\n\n## Members\n\n* `extension` - `\".tar\"`\n\n* `mimeType` - `\"application/x-tar\"`\n\n## Source\n\n[modules/core/src/encoders/tar/tar-encoder.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/encoders/tar/tar-encoder.js)","slug":"modules/core/docs/encoder/tar-encoder","title":"TarEncoder"},{"excerpt":"WebmEncoder A WebM video format encoder that inherits FrameEncoder. FrameEncoderSettings In addition to the top level FrameEncoderSettings…","rawMarkdownBody":"# WebmEncoder\n\nA WebM video format encoder that inherits [FrameEncoder]().\n\n## FrameEncoderSettings\n\nIn addition to the top level [FrameEncoderSettings](/docs/encoder), these settings are available under the `webm` namespace.\n\n* `quality` - See member note. Defaults to 0.8. \n\n## Members\n\n* `extension` - `\".webm\"`\n\n* `mimeType` - `\"video/webm\"`\n\n## Source\n\n[modules/core/src/encoders/video/webm-encoder.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/encoders/video/webm-encoder.js)","slug":"modules/core/docs/encoder/webm-encoder","title":"WebmEncoder"},{"excerpt":"PNGSequenceEncoder A photo sequence encoder that inherits TarEncoder. Saves each frame as a photo contained in a  archive. Notes: PNG…","rawMarkdownBody":"# PNGSequenceEncoder\n\nA photo sequence encoder that inherits [TarEncoder](). Saves each frame as a photo contained in a `\".tar\"` archive.\n\n**Notes:**\n\nPNG supports alpha channel and will produce the highest quality encoding.\n\nConvert PNGs to a video with ffmpeg or a proprietary encoder, like Adobe Media Encoder.\n\n```bash\nffmpeg -pattern_type glob -framerate 30 -pix_fmt yuv420p -i \"*.png\" -tune animation -crf 1 -preset slow video.mp4\n```\n\n## Members\n\n* `extension` - `\".png\"`\n\n* `mimeType` - `\"image/png\"`\n\n## Source\n\n[modules/core/src/encoders/video/png-sequence-encoder.js](https://github.com/uber/hubble.gl/blob/master/modules/core/src/encoders/video/png-sequence-encoder.js)","slug":"modules/core/docs/encoder/png-sequence-encoder","title":"PNGSequenceEncoder"}]}}}